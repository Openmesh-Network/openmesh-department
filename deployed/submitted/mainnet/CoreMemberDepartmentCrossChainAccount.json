{
  "type": "deployment",
  "id": "CoreMemberDepartmentCrossChainAccount",
  "batch": "mainnet",
  "batchIndex": 31,
  "deploymentAddress": "0xE520f941def9FeA4BE3e616E8489e2eA1fe23DaB",
  "constructorArgs": [
    "0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D",
    "4051577828743386545",
    "0x53773D0D0d71fc36cf403D886bc2eb3AC7F5fC24"
  ],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x000000000000000000000000000000000000000000000000706c6f706d656e7a60e0346100d0576001600160401b03601f61071c38819003918201601f1916840191838311858410176100d4578085926060946040528339810103126100d057610048826100e8565b91602081015191821682036100d057604061006391016100e8565b916001600160a01b038116156100b85760805260a05260c05260405161061f90816100fd823960805181818160f50152610165015260a05181818160760152610268015260c05181818160b201526102b00152f35b6040516335fdcccd60e21b81525f6004820152602490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036100d05756fe6080604090808252600480361015610015575f80fd5b5f3560e01c91826301ffc9a7146104ab5750816385572ffb1461012457508063b0f479a1146100e1578063b13f70061461009e5763e655c35e14610057575f80fd5b3461009a575f36600319011261009a576020905167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5f80fd5b503461009a575f36600319011261009a57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461009a575f36600319011261009a57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90503461009a57602060031991818336011261009a5780359267ffffffffffffffff9081851161009a5760a090853603011261009a576001600160a01b03937f0000000000000000000000000000000000000000000000000000000000000000851633036104955785519260a0840184811084821117610482578752818101358452602480830135848116810361009a57868601908152604484013585811161009a576101d690843691870101610553565b90898701918252606485013586811161009a576101f890853691880101610553565b946060880195865260848101359087821161009a57013660238201121561009a578481013590878211610470576102338a8360051b016104fd565b91858b84838152019160061b8301019136831161009a5790868a9594939201905b8282106104135750505060808901525116857f000000000000000000000000000000000000000000000000000000000000000016908181036103f857505051868180518101031261009a576102ab8789920161058f565b1690877f000000000000000000000000000000000000000000000000000000000000000016918281036103df57505050505194855186019260608786860195031261009a576102fb85880161058f565b928288015197606081015191821161009a57019584603f8801121561009a57858701519361033061032b86610537565b6104fd565b908582528782019685878b01011161009a575f806103bd9460a09361037c6103d29a8c7fbc11e91af67097b25ab78f8b93b5aaa2c3a9294d1a617128347a257d787fbb379f8c016105a3565b16988451908d8b5af1943d156103d7573d9461039a61032b87610537565b9586523d5f8b88013e5b519a8151998a998a5289015287015260a08601906105c4565b911515606085015283820360808501526105c4565b0390a2005b6060946103a4565b895163d53a5c0960e01b81529384015282015260449150fd5b6044918486928d51936315a5913960e21b8552840152820152fd5b9091929394508d8236031261009a578d5190818f018b81118382101761045e578f52823590818f16820361009a578f928e928152828501358382015281520191018994939291610254565b8860418b634e487b7160e01b5f52525ffd5b84604187634e487b7160e01b5f52525ffd5b604182634e487b7160e01b5f525260245ffd5b85516335fdcccd60e21b81523381850152602490fd5b903461009a57602036600319011261009a57359063ffffffff60e01b821680920361009a576020916385572ffb60e01b81149081156104ec575b5015158152f35b6301ffc9a760e01b149050836104e5565b6040519190601f01601f1916820167ffffffffffffffff81118382101761052357604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff811161052357601f01601f191660200190565b81601f8201121561009a5780359061056d61032b83610537565b928284526020838301011161009a57815f926020809301838601378301015290565b51906001600160a01b038216820361009a57565b5f5b8381106105b45750505f910152565b81810151838201526020016105a5565b906020916105dd815180928185528580860191016105a3565b601f01601f191601019056fea26469706673582212204e525b0ccedda991ac574fcb277266898eb3279a5aba320eca583ddc0ae336ab64736f6c6343000817003300000000000000000000000080226fc0ee2b096224eeac085bb9a8cba1146f7d000000000000000000000000000000000000000000000000383a1891ae1915b100000000000000000000000053773d0d0d71fc36cf403d886bc2eb3ac7f5fc24",
  "gas": "400586",
  "from": "0x6b221aA392146E31743E1beB5827e88284B09753",
  "transactionSettings": {
    "chainId": 1,
    "nonce": "20",
    "baseFee": "3000000000",
    "priorityFee": "100000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000plopmenz",
  "artifact": {
    "abi": [
      {
        "type": "constructor",
        "inputs": [
          { "name": "_router", "type": "address", "internalType": "address" },
          {
            "name": "_allowedOriginChainSelector",
            "type": "uint64",
            "internalType": "uint64"
          },
          {
            "name": "_allowedOriginAddress",
            "type": "address",
            "internalType": "address"
          }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "allowedOriginAddress",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "allowedOriginChainSelector",
        "inputs": [],
        "outputs": [{ "name": "", "type": "uint64", "internalType": "uint64" }],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "ccipReceive",
        "inputs": [
          {
            "name": "message",
            "type": "tuple",
            "internalType": "struct Client.Any2EVMMessage",
            "components": [
              {
                "name": "messageId",
                "type": "bytes32",
                "internalType": "bytes32"
              },
              {
                "name": "sourceChainSelector",
                "type": "uint64",
                "internalType": "uint64"
              },
              { "name": "sender", "type": "bytes", "internalType": "bytes" },
              { "name": "data", "type": "bytes", "internalType": "bytes" },
              {
                "name": "destTokenAmounts",
                "type": "tuple[]",
                "internalType": "struct Client.EVMTokenAmount[]",
                "components": [
                  {
                    "name": "token",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256"
                  }
                ]
              }
            ]
          }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "getRouter",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "supportsInterface",
        "inputs": [
          { "name": "interfaceId", "type": "bytes4", "internalType": "bytes4" }
        ],
        "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
        "stateMutability": "pure"
      },
      {
        "type": "event",
        "name": "Executed",
        "inputs": [
          {
            "name": "messageId",
            "type": "bytes32",
            "indexed": true,
            "internalType": "bytes32"
          },
          {
            "name": "to",
            "type": "address",
            "indexed": false,
            "internalType": "address"
          },
          {
            "name": "value",
            "type": "uint256",
            "indexed": false,
            "internalType": "uint256"
          },
          {
            "name": "data",
            "type": "bytes",
            "indexed": false,
            "internalType": "bytes"
          },
          {
            "name": "success",
            "type": "bool",
            "indexed": false,
            "internalType": "bool"
          },
          {
            "name": "returnValue",
            "type": "bytes",
            "indexed": false,
            "internalType": "bytes"
          }
        ],
        "anonymous": false
      },
      {
        "type": "error",
        "name": "InvalidOriginAddress",
        "inputs": [
          { "name": "received", "type": "address", "internalType": "address" },
          { "name": "expected", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "InvalidOriginChainSelector",
        "inputs": [
          { "name": "received", "type": "uint64", "internalType": "uint64" },
          { "name": "expected", "type": "uint64", "internalType": "uint64" }
        ]
      },
      {
        "type": "error",
        "name": "InvalidRouter",
        "inputs": [
          { "name": "router", "type": "address", "internalType": "address" }
        ]
      }
    ],
    "bytecode": "0x60e0346100d0576001600160401b03601f61071c38819003918201601f1916840191838311858410176100d4578085926060946040528339810103126100d057610048826100e8565b91602081015191821682036100d057604061006391016100e8565b916001600160a01b038116156100b85760805260a05260c05260405161061f90816100fd823960805181818160f50152610165015260a05181818160760152610268015260c05181818160b201526102b00152f35b6040516335fdcccd60e21b81525f6004820152602490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036100d05756fe6080604090808252600480361015610015575f80fd5b5f3560e01c91826301ffc9a7146104ab5750816385572ffb1461012457508063b0f479a1146100e1578063b13f70061461009e5763e655c35e14610057575f80fd5b3461009a575f36600319011261009a576020905167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5f80fd5b503461009a575f36600319011261009a57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461009a575f36600319011261009a57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90503461009a57602060031991818336011261009a5780359267ffffffffffffffff9081851161009a5760a090853603011261009a576001600160a01b03937f0000000000000000000000000000000000000000000000000000000000000000851633036104955785519260a0840184811084821117610482578752818101358452602480830135848116810361009a57868601908152604484013585811161009a576101d690843691870101610553565b90898701918252606485013586811161009a576101f890853691880101610553565b946060880195865260848101359087821161009a57013660238201121561009a578481013590878211610470576102338a8360051b016104fd565b91858b84838152019160061b8301019136831161009a5790868a9594939201905b8282106104135750505060808901525116857f000000000000000000000000000000000000000000000000000000000000000016908181036103f857505051868180518101031261009a576102ab8789920161058f565b1690877f000000000000000000000000000000000000000000000000000000000000000016918281036103df57505050505194855186019260608786860195031261009a576102fb85880161058f565b928288015197606081015191821161009a57019584603f8801121561009a57858701519361033061032b86610537565b6104fd565b908582528782019685878b01011161009a575f806103bd9460a09361037c6103d29a8c7fbc11e91af67097b25ab78f8b93b5aaa2c3a9294d1a617128347a257d787fbb379f8c016105a3565b16988451908d8b5af1943d156103d7573d9461039a61032b87610537565b9586523d5f8b88013e5b519a8151998a998a5289015287015260a08601906105c4565b911515606085015283820360808501526105c4565b0390a2005b6060946103a4565b895163d53a5c0960e01b81529384015282015260449150fd5b6044918486928d51936315a5913960e21b8552840152820152fd5b9091929394508d8236031261009a578d5190818f018b81118382101761045e578f52823590818f16820361009a578f928e928152828501358382015281520191018994939291610254565b8860418b634e487b7160e01b5f52525ffd5b84604187634e487b7160e01b5f52525ffd5b604182634e487b7160e01b5f525260245ffd5b85516335fdcccd60e21b81523381850152602490fd5b903461009a57602036600319011261009a57359063ffffffff60e01b821680920361009a576020916385572ffb60e01b81149081156104ec575b5015158152f35b6301ffc9a760e01b149050836104e5565b6040519190601f01601f1916820167ffffffffffffffff81118382101761052357604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff811161052357601f01601f191660200190565b81601f8201121561009a5780359061056d61032b83610537565b928284526020838301011161009a57815f926020809301838601378301015290565b51906001600160a01b038216820361009a57565b5f5b8381106105b45750505f910152565b81810151838201526020016105a5565b906020916105dd815180928185528580860191016105a3565b601f01601f191601019056fea26469706673582212204e525b0ccedda991ac574fcb277266898eb3279a5aba320eca583ddc0ae336ab64736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/CrossChainAccount.sol:CrossChainAccount",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/ccip/CCIPReceiver.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAny2EVMMessageReceiver} from \"./IAny2EVMMessageReceiver.sol\";\n\nimport {Client} from \"./Client.sol\";\n\nimport {IERC165} from \"../openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\";\n\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\n    address internal immutable i_router;\n\n    constructor(address router) {\n        if (router == address(0)) revert InvalidRouter(address(0));\n        i_router = router;\n    }\n\n    /// @notice IERC165 supports an interfaceId\n    /// @param interfaceId The interfaceId to check\n    /// @return true if the interfaceId is supported\n    /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\n    /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\n    /// This allows CCIP to check if ccipReceive is available before calling it.\n    /// If this returns false or reverts, only tokens are transferred to the receiver.\n    /// If this returns true, tokens are transferred and ccipReceive is called atomically.\n    /// Additionally, if the receiver address does not have code associated with\n    /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\n    function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\n        return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\n    }\n\n    /// @inheritdoc IAny2EVMMessageReceiver\n    function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\n        _ccipReceive(message);\n    }\n\n    /// @notice Override this function in your implementation.\n    /// @param message Any2EVMMessage\n    function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\n\n    /////////////////////////////////////////////////////////////////////\n    // Plumbing\n    /////////////////////////////////////////////////////////////////////\n\n    /// @notice Return the current router\n    /// @return i_router address\n    function getRouter() public view returns (address) {\n        return address(i_router);\n    }\n\n    error InvalidRouter(address router);\n\n    /// @dev only calls from the set router are accepted.\n    modifier onlyRouter() {\n        if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\n        _;\n    }\n}\n"
        },
        "lib/ccip/Client.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// End consumer library.\nlibrary Client {\n    /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\n    struct EVMTokenAmount {\n        address token; // token address on the local chain.\n        uint256 amount; // Amount of tokens.\n    }\n\n    struct Any2EVMMessage {\n        bytes32 messageId; // MessageId corresponding to ccipSend on source.\n        uint64 sourceChainSelector; // Source chain selector.\n        bytes sender; // abi.decode(sender) if coming from an EVM chain.\n        bytes data; // payload sent in original message.\n        EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\n    }\n\n    // If extraArgs is empty bytes, the default is 200k gas limit.\n    struct EVM2AnyMessage {\n        bytes receiver; // abi.encode(receiver address) for dest EVM chains\n        bytes data; // Data payload\n        EVMTokenAmount[] tokenAmounts; // Token transfers\n        address feeToken; // Address of feeToken. address(0) means you will send msg.value.\n        bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\n    }\n\n    // bytes4(keccak256(\"CCIP EVMExtraArgsV1\"));\n    bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\n\n    struct EVMExtraArgsV1 {\n        uint256 gasLimit;\n    }\n\n    function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n        return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\n    }\n}\n"
        },
        "lib/ccip/IAny2EVMMessageReceiver.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"./Client.sol\";\n\n/// @notice Application contracts that intend to receive messages from\n/// the router should implement this interface.\ninterface IAny2EVMMessageReceiver {\n    /// @notice Called by the Router to deliver a message.\n    /// If this reverts, any token transfers also revert. The message\n    /// will move to a FAILED state and become available for manual execution.\n    /// @param message CCIP Message\n    /// @dev Note ensure you check the msg.sender is the OffRampRouter\n    function ccipReceive(Client.Any2EVMMessage calldata message) external;\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "src/CrossChainAccount.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {CCIPReceiver, Client} from \"../lib/ccip/CCIPReceiver.sol\";\n\ncontract CrossChainAccount is CCIPReceiver {\n    error InvalidOriginChainSelector(uint64 received, uint64 expected);\n    error InvalidOriginAddress(address received, address expected);\n\n    event Executed(bytes32 indexed messageId, address to, uint256 value, bytes data, bool success, bytes returnValue);\n\n    uint64 public immutable allowedOriginChainSelector;\n    address public immutable allowedOriginAddress;\n\n    constructor(address _router, uint64 _allowedOriginChainSelector, address _allowedOriginAddress)\n        CCIPReceiver(_router)\n    {\n        allowedOriginChainSelector = _allowedOriginChainSelector;\n        allowedOriginAddress = _allowedOriginAddress;\n    }\n\n    /// @inheritdoc CCIPReceiver\n    function _ccipReceive(Client.Any2EVMMessage memory message) internal override {\n        _ensureOriginChainSelectorAllowed(message.sourceChainSelector);\n        _ensureOriginAddressAllowed(abi.decode(message.sender, (address)));\n        (address to, uint256 value, bytes memory data) = abi.decode(message.data, (address, uint256, bytes));\n        (bool success, bytes memory returnValue) = to.call{value: value}(data);\n        emit Executed(message.messageId, to, value, data, success, returnValue);\n    }\n\n    /// Rejects any messages originating from a different origin chain than the allowed one.\n    function _ensureOriginChainSelectorAllowed(uint64 _originChainSelector) internal view {\n        if (_originChainSelector != allowedOriginChainSelector) {\n            revert InvalidOriginChainSelector(_originChainSelector, allowedOriginChainSelector);\n        }\n    }\n\n    /// Rejects any messages originating from a different sender (on the origin chain) than the allowed one.\n    function _ensureOriginAddressAllowed(address _originAddress) internal view {\n        if (_originAddress != allowedOriginAddress) {\n            revert InvalidOriginAddress(_originAddress, allowedOriginAddress);\n        }\n    }\n}\n"
        }
      },
      "settings": {
        "remappings": [
          "@layerzerolabs/lz-evm-protocol-v2/contracts/=lib/LayerZero-v2/protocol/contracts/",
          "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
          "ccip/=lib/ccip/",
          "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
          "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "shanghai",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/openmesh-smart-contracts/lib/crosschain-account",
  "submitted": {
    "transactionHash": "0xdb3c8fc4afabea2a73a2f91d6d4025781dcee0999c05a4747907101cfcc2027e",
    "date": "2024-05-20T16:13:38.531Z"
  }
}

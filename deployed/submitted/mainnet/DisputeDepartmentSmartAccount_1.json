{
  "type": "deployment",
  "id": "DisputeDepartmentSmartAccount_1",
  "batch": "mainnet",
  "batchIndex": 2,
  "deploymentAddress": "0x7aC61b993B4aa460EDf7BC4266Ed4BBCa20bF2Db",
  "constructorArgs": [],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x00000000000000000000000000000000000000000000000000444953505554456080346100e557632a1b8f9b60e01b60208201908152736b221aa392146e31743e1beb5827e88284b0975360248084019190915282526001600160401b0391906060820190838211838310176100c4575f9283926040525190734811864b715c0f1b0f9790a8ee6f11dc25b7f2585af43d156100d8573d908282116100c457601f199160405192603f81601f8401160116830193838510908511176100c4576100b4936040528252815f60203d92013e6100e9565b506040516105ce908161016d8239f35b634e487b7160e01b5f52604160045260245ffd5b6100b491506060906100e9565b5f80fd5b909190610112575080511561010057805190602001fd5b604051630a12f52160e11b8152600490fd5b908051158061014f575b6101235790565b604051639996b31560e01b8152734811864b715c0f1b0f9790a8ee6f11dc25b7f2586004820152602490fd5b50734811864b715c0f1b0f9790a8ee6f11dc25b7f2583b1561011c56fe60806040526004361015610015575b366104b657005b5f3560e01c8063306b4d6c146100445780638babb23b1461003f5763ac9650d80361000e5761023f565b61017f565b346100e55760603660031901126100e55761005d6100e9565b60243560443567ffffffffffffffff81116100e5576100836100939136906004016100ff565b61008c33610422565b3691610300565b918147106100cd575f80846100bd9460206100c99751920190855af16100b761047a565b91610535565b6040519182918261016b565b0390f35b60405163cd78605960e01b8152306004820152602490fd5b5f80fd5b600435906001600160a01b03821682036100e557565b9181601f840112156100e55782359167ffffffffffffffff83116100e557602083818601950101116100e557565b91908251928382525f5b848110610157575050825f602080949584010152601f8019910116010190565b602081830181015184830182015201610137565b90602061017c92818152019061012d565b90565b346100e55760403660031901126100e5576101986100e9565b60243567ffffffffffffffff81116100e5576100c9916101c26100836101c89336906004016100ff565b9061049f565b60405191829160208352602083019061012d565b6020808201906020835283518092526040830192602060408460051b8301019501935f915b8483106102115750505050505090565b909192939495848061022f600193603f198682030187528a5161012d565b9801930193019194939290610201565b346100e55760203660031901126100e55767ffffffffffffffff6004358181116100e557366023820112156100e55780600401359182116100e5573660248360051b830101116100e5576100c99160246102999201610370565b604051918291826101dc565b634e487b7160e01b5f52604160045260245ffd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176102df57604052565b6102a5565b67ffffffffffffffff81116102df57601f01601f191660200190565b92919261031461030f836102e4565b6102b9565b93828552828201116100e557815f926020928387013784010152565b67ffffffffffffffff81116102df5760051b60200190565b805182101561035c5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b9061037d61030f82610330565b81815291601f1961038d83610330565b015f5b8181106104115750505f5b8281106103a85750505090565b8060051b820135601e19833603018112156100e55782019081359167ffffffffffffffff83116100e55760200182360381136100e5576103ef6103f5916001943691610300565b3061049f565b6103ff8287610348565b5261040a8186610348565b500161039b565b806060602080938801015201610390565b7f7da6c9ab90b7db6fcaf21a446db7bbaed4e66d04f1d85c8b0a55dc8af596b030546001600160a01b03918216911680820361045c575050565b6044925060405191631194af8760e11b835260048301526024820152fd5b3d1561049a573d9061048e61030f836102e4565b9182523d5f602084013e565b606090565b5f8061017c93602081519101845af46100b761047a565b5f80356001600160e01b0319168082527f56a2f102f06100e6e9193cce9cca60c6a83719df4146213240bdd4963e5931ba6020526040909120546001600160a01b031690811561051d575f8083368280378136915af43d5f803e15610519573d5ff35b3d5ffd5b60249060405190630a82dd7360e31b82526004820152fd5b9061055c575080511561054a57805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061058f575b61056d575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561056556fea264697066735822122089219459cae4a82cff166225e4073bb13499910fc6d07f8cc28525ad12006f7964736f6c63430008170033",
  "gas": "555764",
  "from": "0x6b221aA392146E31743E1beB5827e88284B09753",
  "transactionSettings": {
    "chainId": 1,
    "nonce": "13",
    "baseFee": "3000000000",
    "priorityFee": "100000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000DISPUTE",
  "artifact": {
    "abi": [
      { "type": "constructor", "inputs": [], "stateMutability": "nonpayable" },
      { "type": "fallback", "stateMutability": "payable" },
      { "type": "receive", "stateMutability": "payable" },
      {
        "type": "function",
        "name": "multicall",
        "inputs": [
          { "name": "data", "type": "bytes[]", "internalType": "bytes[]" }
        ],
        "outputs": [
          { "name": "results", "type": "bytes[]", "internalType": "bytes[]" }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "performCall",
        "inputs": [
          { "name": "to", "type": "address", "internalType": "address" },
          { "name": "value", "type": "uint256", "internalType": "uint256" },
          { "name": "data", "type": "bytes", "internalType": "bytes" }
        ],
        "outputs": [
          { "name": "returnValue", "type": "bytes", "internalType": "bytes" }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "performDelegateCall",
        "inputs": [
          { "name": "to", "type": "address", "internalType": "address" },
          { "name": "data", "type": "bytes", "internalType": "bytes" }
        ],
        "outputs": [
          { "name": "returnValue", "type": "bytes", "internalType": "bytes" }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "error",
        "name": "AddressEmptyCode",
        "inputs": [
          { "name": "target", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "AddressInsufficientBalance",
        "inputs": [
          { "name": "account", "type": "address", "internalType": "address" }
        ]
      },
      { "type": "error", "name": "FailedInnerCall", "inputs": [] },
      {
        "type": "error",
        "name": "FunctionNotFound",
        "inputs": [
          {
            "name": "functionSelector",
            "type": "bytes4",
            "internalType": "bytes4"
          }
        ]
      },
      {
        "type": "error",
        "name": "NotOwner",
        "inputs": [
          { "name": "account", "type": "address", "internalType": "address" },
          { "name": "owner", "type": "address", "internalType": "address" }
        ]
      }
    ],
    "bytecode": "0x6080346100e557632a1b8f9b60e01b60208201908152736b221aa392146e31743e1beb5827e88284b0975360248084019190915282526001600160401b0391906060820190838211838310176100c4575f9283926040525190734811864b715c0f1b0f9790a8ee6f11dc25b7f2585af43d156100d8573d908282116100c457601f199160405192603f81601f8401160116830193838510908511176100c4576100b4936040528252815f60203d92013e6100e9565b506040516105ce908161016d8239f35b634e487b7160e01b5f52604160045260245ffd5b6100b491506060906100e9565b5f80fd5b909190610112575080511561010057805190602001fd5b604051630a12f52160e11b8152600490fd5b908051158061014f575b6101235790565b604051639996b31560e01b8152734811864b715c0f1b0f9790a8ee6f11dc25b7f2586004820152602490fd5b50734811864b715c0f1b0f9790a8ee6f11dc25b7f2583b1561011c56fe60806040526004361015610015575b366104b657005b5f3560e01c8063306b4d6c146100445780638babb23b1461003f5763ac9650d80361000e5761023f565b61017f565b346100e55760603660031901126100e55761005d6100e9565b60243560443567ffffffffffffffff81116100e5576100836100939136906004016100ff565b61008c33610422565b3691610300565b918147106100cd575f80846100bd9460206100c99751920190855af16100b761047a565b91610535565b6040519182918261016b565b0390f35b60405163cd78605960e01b8152306004820152602490fd5b5f80fd5b600435906001600160a01b03821682036100e557565b9181601f840112156100e55782359167ffffffffffffffff83116100e557602083818601950101116100e557565b91908251928382525f5b848110610157575050825f602080949584010152601f8019910116010190565b602081830181015184830182015201610137565b90602061017c92818152019061012d565b90565b346100e55760403660031901126100e5576101986100e9565b60243567ffffffffffffffff81116100e5576100c9916101c26100836101c89336906004016100ff565b9061049f565b60405191829160208352602083019061012d565b6020808201906020835283518092526040830192602060408460051b8301019501935f915b8483106102115750505050505090565b909192939495848061022f600193603f198682030187528a5161012d565b9801930193019194939290610201565b346100e55760203660031901126100e55767ffffffffffffffff6004358181116100e557366023820112156100e55780600401359182116100e5573660248360051b830101116100e5576100c99160246102999201610370565b604051918291826101dc565b634e487b7160e01b5f52604160045260245ffd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176102df57604052565b6102a5565b67ffffffffffffffff81116102df57601f01601f191660200190565b92919261031461030f836102e4565b6102b9565b93828552828201116100e557815f926020928387013784010152565b67ffffffffffffffff81116102df5760051b60200190565b805182101561035c5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b9061037d61030f82610330565b81815291601f1961038d83610330565b015f5b8181106104115750505f5b8281106103a85750505090565b8060051b820135601e19833603018112156100e55782019081359167ffffffffffffffff83116100e55760200182360381136100e5576103ef6103f5916001943691610300565b3061049f565b6103ff8287610348565b5261040a8186610348565b500161039b565b806060602080938801015201610390565b7f7da6c9ab90b7db6fcaf21a446db7bbaed4e66d04f1d85c8b0a55dc8af596b030546001600160a01b03918216911680820361045c575050565b6044925060405191631194af8760e11b835260048301526024820152fd5b3d1561049a573d9061048e61030f836102e4565b9182523d5f602084013e565b606090565b5f8061017c93602081519101845af46100b761047a565b5f80356001600160e01b0319168082527f56a2f102f06100e6e9193cce9cca60c6a83719df4146213240bdd4963e5931ba6020526040909120546001600160a01b031690811561051d575f8083368280378136915af43d5f803e15610519573d5ff35b3d5ffd5b60249060405190630a82dd7360e31b82526004820152fd5b9061055c575080511561054a57805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061058f575b61056d575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561056556fea264697066735822122089219459cae4a82cff166225e4073bb13499910fc6d07f8cc28525ad12006f7964736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/OpenmeshAdmin.sol:OpenmeshAdmin",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/smart-account/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
        },
        "lib/smart-account/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
        },
        "lib/smart-account/lib/openzeppelin-contracts/contracts/utils/Multicall.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\n\npragma solidity ^0.8.20;\n\nimport {Address} from \"./Address.sol\";\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\n * selectors won't filter calls nested within a {multicall} operation.\n *\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\n * {_msgSender} are not propagated to subcalls.\n */\nabstract contract Multicall is Context {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        bytes memory context = msg.sender == _msgSender()\n            ? new bytes(0)\n            : msg.data[msg.data.length - _contextSuffixLength():];\n\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\n        }\n        return results;\n    }\n}\n"
        },
        "lib/smart-account/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "lib/smart-account/src/ISmartAccount.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISmartAccount {\n    /// @notice Executes an arbitrary blockchain call.\n    function performCall(address to, uint256 value, bytes calldata data) external returns (bytes memory returnValue);\n\n    /// @notice Executes an arbitrary blockchain call with delegateCall. This allows advanced code execution inside the account itself.\n    function performDelegateCall(address to, bytes calldata data) external returns (bytes memory returnValue);\n\n    /// @notice Receives and executes a batch of function calls on this contract.\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\n}\n"
        },
        "lib/smart-account/src/SmartAccount.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Address} from \"../lib/openzeppelin-contracts/contracts/utils/Multicall.sol\";\n\nimport {SmartAccountModulesLib} from \"./modules/SmartAccountModulesLib.sol\";\nimport {SmartAccountOwnableLib} from \"./modules/ownable/SmartAccountOwnableLib.sol\";\nimport {ISmartAccount} from \"./ISmartAccount.sol\";\n\ncontract SmartAccount is ISmartAccount {\n    constructor(address installer, bytes memory installData) {\n        Address.functionDelegateCall(installer, installData);\n    }\n\n    /// @inheritdoc ISmartAccount\n    function performCall(address to, uint256 value, bytes calldata data) external returns (bytes memory returnValue) {\n        SmartAccountOwnableLib.ensureIsOwner(msg.sender);\n        return Address.functionCallWithValue(to, data, value);\n    }\n\n    /// @inheritdoc ISmartAccount\n    function performDelegateCall(address to, bytes calldata data) external returns (bytes memory returnValue) {\n        SmartAccountOwnableLib.ensureIsOwner(msg.sender);\n        return Address.functionDelegateCall(to, data);\n    }\n\n    /// @inheritdoc ISmartAccount\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i; i < data.length;) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        return results;\n    }\n\n    /// @notice Calls smart account module if any is registered for this function call.\n    fallback() external payable {\n        SmartAccountModulesLib.callModule();\n    }\n\n    receive() external payable {}\n}\n"
        },
        "lib/smart-account/src/SmartAccountBaseInstaller.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ISmartAccount} from \"./ISmartAccount.sol\";\nimport {SmartAccountModulesLib, ISmartAccountModules} from \"./modules/SmartAccountModulesLib.sol\";\n\nimport {SmartAccountOwnableLib, ISmartAccountOwnable} from \"./modules/ownable/SmartAccountOwnableLib.sol\";\nimport {SmartAccountERC165Lib, ISmartAccountERC165} from \"./modules/erc165/SmartAccountERC165Lib.sol\";\n\ninterface ISmartAccountBase is ISmartAccount, ISmartAccountModules, ISmartAccountOwnable, ISmartAccountERC165 {}\n\ncontract SmartAccountBaseInstaller {\n    ISmartAccountModules public immutable SMART_ACCOUNT_MODULES;\n    ISmartAccountOwnable public immutable SMART_ACCOUNT_OWNABLE;\n    ISmartAccountERC165 public immutable SMART_ACCOUNT_ERC165;\n\n    constructor(\n        ISmartAccountModules smartAccountModules,\n        ISmartAccountOwnable smartAccountOwnable,\n        ISmartAccountERC165 smartAccountERC165\n    ) {\n        SMART_ACCOUNT_MODULES = smartAccountModules;\n        SMART_ACCOUNT_OWNABLE = smartAccountOwnable;\n        SMART_ACCOUNT_ERC165 = smartAccountERC165;\n    }\n\n    /// @notice Installs the base modules into a smart account.\n    /// @param owner The initial owner of the smart account.\n    function install(address owner) public virtual {\n        SmartAccountERC165Lib.setInterfaceSupport(type(ISmartAccount).interfaceId, true);\n        SmartAccountModulesLib.fullInstall(address(SMART_ACCOUNT_MODULES));\n        SmartAccountOwnableLib.fullInstall(address(SMART_ACCOUNT_OWNABLE), owner);\n        SmartAccountERC165Lib.fullInstall(address(SMART_ACCOUNT_ERC165));\n    }\n\n    /// @notice Uninstalls the base modules of a smart account.\n    /// @dev This will not remove any storage (except interfaces). This means that owner stays active for the base smart account functionality. Any uninstalled modules will also stay active (even though the module manager is uninstalled).\n    function uninstall() public virtual {\n        SmartAccountModulesLib.fullUninstall();\n        SmartAccountOwnableLib.fullUninstall();\n        SmartAccountERC165Lib.fullUninstall();\n    }\n\n    /// @notice Set the currently registered module for function.\n    /// @param functionSelector Function of the module to register.\n    /// @param module Address of the module to forward the call to.\n    /// @dev Set to zero address to remove.\n    /// @dev Will override any existing module registered for this function without warning.\n    /// @dev In case of an uninstall of a module containing this function, the function will be removed, no matter if the uninstalled module is the current module for this function.\n    function setModule(bytes4 functionSelector, address module) external {\n        SmartAccountOwnableLib.ensureIsOwner(msg.sender);\n        SmartAccountModulesLib.setModule(functionSelector, module);\n    }\n\n    //// @notice Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\n    function transferOwnership(address newOwner) external {\n        SmartAccountOwnableLib.ensureIsOwner(msg.sender);\n        SmartAccountOwnableLib.setOwner(newOwner);\n    }\n}\n"
        },
        "lib/smart-account/src/modules/ISmartAccountModules.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISmartAccountModules {\n    /// @notice When no function exists for function called\n    error FunctionNotFound(bytes4 functionSelector);\n\n    /// @notice Module is added/updated/removed.\n    event ModuleSet(bytes4 functionSelector, address module);\n\n    /// @notice Set the currently registered module for function.\n    /// @dev Zero address means no module is registered.\n    function getModule(bytes4 functionSelector) external view returns (address module);\n}\n"
        },
        "lib/smart-account/src/modules/SmartAccountModulesLib.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {SmartAccountERC165Lib} from \"./erc165/SmartAccountERC165Lib.sol\";\n\nimport {ISmartAccountModules} from \"./ISmartAccountModules.sol\";\n\n// Inspired by ERC-2535\nlibrary SmartAccountModulesLib {\n    bytes32 constant STORAGE_POSITION = keccak256(\"modules.smartaccount.plopmenz\");\n\n    struct Storage {\n        mapping(bytes4 functionSelector => address module) getFunction;\n    }\n\n    function getStorage() internal pure returns (Storage storage s) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Sets the interfaces implemented by this contract to (un)supported.\n    function setInterfaces(bool supported) internal {\n        SmartAccountERC165Lib.setInterfaceSupport(type(ISmartAccountModules).interfaceId, supported);\n    }\n\n    /// @notice Installs all functions, interfaces, and performs storage initialization of this module.\n    function fullInstall(address module) internal {\n        setModule(ISmartAccountModules.getModule.selector, module);\n        setInterfaces(true);\n    }\n\n    /// @notice Uninstalls all functions and interfaces of this module.\n    function fullUninstall() internal {\n        setModule(ISmartAccountModules.getModule.selector, address(0));\n        setInterfaces(false);\n    }\n\n    /// @notice Get the currently registered module for function.\n    function getModule(bytes4 functionSelector) internal view returns (address module) {\n        return getStorage().getFunction[functionSelector];\n    }\n\n    /// @notice Set the currently registered module for function.\n    /// @dev Set to zero address to remove.\n    function setModule(bytes4 functionSelector, address module) internal {\n        getStorage().getFunction[functionSelector] = module;\n        emit ISmartAccountModules.ModuleSet(functionSelector, module);\n    }\n\n    /// @notice Delegates the current msg call to a module, if one is registered for that function.\n    function callModule() internal {\n        // Get module from function selector\n        address module = getModule(msg.sig);\n        if (module == address(0)) {\n            revert ISmartAccountModules.FunctionNotFound(msg.sig);\n        }\n        // Execute external function from module using delegatecall and return any value.\n        assembly {\n            // Copy function selector and any arguments\n            calldatacopy(0, 0, calldatasize())\n            // Execute function call using the module\n            let result := delegatecall(gas(), module, 0, calldatasize(), 0, 0)\n            // Get any return value\n            returndatacopy(0, 0, returndatasize())\n            // Return any return value or error back to the caller\n            switch result\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n}\n"
        },
        "lib/smart-account/src/modules/erc165/ISmartAccountERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"../../../lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\";\n\ninterface ISmartAccountERC165 is IERC165 {\n    /// @notice Interface support changed.\n    event InterfaceSupportedChanged(bytes4 indexed interfaceId, bool supported);\n}\n"
        },
        "lib/smart-account/src/modules/erc165/SmartAccountERC165Lib.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {SmartAccountModulesLib} from \"../SmartAccountModulesLib.sol\";\n\nimport {ISmartAccountERC165, IERC165} from \"./ISmartAccountERC165.sol\";\n\nlibrary SmartAccountERC165Lib {\n    bytes32 constant STORAGE_POSITION = keccak256(\"erc165.modules.smartaccount.plopmenz\");\n\n    struct Storage {\n        mapping(bytes4 interfaceId => bool supported) getSupported;\n    }\n\n    function getStorage() internal pure returns (Storage storage s) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Installs all functions, interfaces, and performs storage initialization of this module.\n    function fullInstall(address module) internal {\n        SmartAccountModulesLib.setModule(IERC165.supportsInterface.selector, module);\n    }\n\n    /// @notice Uninstalls all functions and interfaces of this module.\n    function fullUninstall() internal {\n        SmartAccountModulesLib.setModule(IERC165.supportsInterface.selector, address(0));\n    }\n\n    /// @notice Gets the interfaces supported by the Smart Account.\n    function supportsInterface(bytes4 interfaceId) internal view returns (bool supported) {\n        return getStorage().getSupported[interfaceId];\n    }\n\n    /// @notice Updates the interfaces supported by the Smart Account.\n    function setInterfaceSupport(bytes4 interfaceId, bool supported) internal {\n        getStorage().getSupported[interfaceId] = supported;\n        emit ISmartAccountERC165.InterfaceSupportedChanged(interfaceId, supported);\n    }\n}\n"
        },
        "lib/smart-account/src/modules/ownable/ISmartAccountOwnable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISmartAccountOwnable {\n    /// @notice The caller account is not authorized to perform an operation.\n    error NotOwner(address account, address owner);\n\n    /// @notice A (new) account has become the owner of this contract.\n    event NewOwner(address account);\n\n    /// @notice Returns the address of the current owner.\n    function owner() external view returns (address);\n}\n"
        },
        "lib/smart-account/src/modules/ownable/SmartAccountOwnableLib.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {SmartAccountERC165Lib} from \"../erc165/SmartAccountERC165Lib.sol\";\nimport {SmartAccountModulesLib} from \"../SmartAccountModulesLib.sol\";\n\nimport {ISmartAccountOwnable} from \"./ISmartAccountOwnable.sol\";\n\nlibrary SmartAccountOwnableLib {\n    bytes32 constant STORAGE_POSITION = keccak256(\"ownable.modules.smartaccount.plopmenz\");\n\n    struct Storage {\n        address owner;\n    }\n\n    function getStorage() internal pure returns (Storage storage s) {\n        bytes32 position = STORAGE_POSITION;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Sets the interfaces implemented by this contract to (un)supported.\n    function setInterfaces(bool supported) internal {\n        SmartAccountERC165Lib.setInterfaceSupport(type(ISmartAccountOwnable).interfaceId, supported);\n    }\n\n    /// @notice Installs all functions, interfaces, and performs storage initialization of this module.\n    function fullInstall(address module, address initialOwner) internal {\n        SmartAccountOwnableLib.setOwner(initialOwner);\n        SmartAccountModulesLib.setModule(ISmartAccountOwnable.owner.selector, module);\n        setInterfaces(true);\n    }\n\n    /// @notice Uninstalls all functions and interfaces of this module.\n    function fullUninstall() internal {\n        SmartAccountModulesLib.setModule(ISmartAccountOwnable.owner.selector, address(0));\n        setInterfaces(false);\n    }\n\n    /// @notice Returns the address of the current owner.\n    function owner() internal view returns (address) {\n        return getStorage().owner;\n    }\n\n    /// @notice Reverts if `account` is not the current owner.\n    function ensureIsOwner(address account) internal view {\n        if (account != owner()) {\n            revert ISmartAccountOwnable.NotOwner(account, owner());\n        }\n    }\n\n    /// @notice Sets the address of the current owner.\n    function setOwner(address account) internal {\n        getStorage().owner = account;\n        emit ISmartAccountOwnable.NewOwner(account);\n    }\n}\n"
        },
        "src/OpenmeshAdmin.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {SmartAccount} from \"../lib/smart-account/src/SmartAccount.sol\";\nimport {SmartAccountBaseInstaller} from \"../lib/smart-account/src/SmartAccountBaseInstaller.sol\";\n\naddress constant installer = 0x4811864B715C0F1B0f9790a8ee6F11dC25b7F258;\n\ncontract OpenmeshAdmin is SmartAccount {\n    constructor()\n        SmartAccount(\n            installer,\n            abi.encodeWithSelector(SmartAccountBaseInstaller.install.selector, 0x6b221aA392146E31743E1beB5827e88284B09753)\n        )\n    {}\n}\n"
        }
      },
      "settings": {
        "remappings": [
          "@openzeppelin/contracts/=lib/smart-account/lib/openzeppelin-contracts/contracts/",
          "ds-test/=lib/smart-account/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
          "ens-reverse-claimable/=lib/ens-reverse-claimable/src/",
          "erc4626-tests/=lib/smart-account/lib/openzeppelin-contracts/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "openzeppelin-contracts/=lib/smart-account/lib/openzeppelin-contracts/",
          "smart-account/=lib/smart-account/src/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "shanghai",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/openmesh-smart-contracts/lib/openmesh-admin",
  "submitted": {
    "transactionHash": "0x67b8c8a715d5cc46faf80f6f39a1697a6d90fe1032a37e099a21e22f7bdf7035",
    "date": "2024-05-20T16:12:45.768Z"
  }
}
